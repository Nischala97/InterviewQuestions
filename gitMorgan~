1. How HashMap works in Java? 
HashMap is the most used data structure in java because it gives almost constant time performance of O(1) for put and get operations irrespective of how big is the data.HashMap stores the data in the form of key-value pairs. Each key-value pair is stored in an object of Entry<K, V> class. Entry<K, V> class is the static inner class of HashMap. 
	This inner class has four fields. key, value, next and hash.
		key : It stores the key of an element and its final.
		value : It holds the value of an element.
		next : It holds the pointer to next key-value pair. This attribute makes the key-value pairs stored as a linked list.
		hash : It holds the hashcode of the key.
 All these Entry<K, V> objects are stored in an array called table[]. 
It doesn’t inserts the objects as you put them into HashMap i.e first element at index 0, second element at index 1 and so on. Instead it uses the hashcode of the key to decide the index for a particular key-value pair. It is called Hashing.


2. Count the occurrences of numbers in an array
Use Arrays.sort() to arrange them in an order. Once the element is found, keep counting until the next element is different. Then stop and return count. 



3. What is the difference between JDK 1.5 and JDK 1.4?
The major enhancement for JDK 1.5 version

1. Generics
2. Enhanced for loop
3. Autoboxing/Unboxing
4.Type Safe Enums
5. Varargs
6. Static import
7. Annotations


4. What is the HashCode and Equal method?
In java equals() method is used to compare equality of two Objects. The equality can be compared in two ways:

	Shallow comparison: The default implementation of equals method is defined in Java.lang.Object class which simply checks if two Object 			references (say x and y) refer to the same Object. i.e. It checks if x == y. Since Object class has no data members that 			define its state, it is also known as shallow comparison.
   	Deep Comparison: Suppose a class provides its own implementation of equals() method in order to compare the Objects of that class 			w.r.t state of the Objects. That means data members (i.e. fields) of Objects are to be compared with one another. Such 			Comparison based on data members is known as deep comparison.

HashCode() returns the hashcode value as an Integer. Hashcode value is mostly used in hashing based collections like HashMap, HashSet, HashTable….etc. This method must be overridden in every class which overrides equals() method.


5. Talk about the database. 
Database is a systematic collection of data. Databases support storage and  manipulation of data. Database Management System (DBMS) is a collection of programs which enables its users to access database, manipulate data, reporting / representation of  data .
It also helps to control access to the  database. 4 Types:
	Hierarchical: This type of DBMS employs the "parent-child" relationship of storing data.
	Network DBMS: This type of DBMS supports many-to many relations.  
	Relational DBMS: This type of DBMS defines database relationships in form of tables, also known as relations. 
	Object Oriented Relation DBMS: This type supports storage of new data types.


6. What is index, the advantage and disadvantage?
Indexes are special lookup tables that the database search engine can use to speed up data retrieval. Simply put, an index is a pointer to data in a table. 
	Advantage: 
		Their use in queries usually results in much better performance.
    		They make it possible to quickly retrieve (fetch) data i.e SELECT and WHERE clauses. 
    		They can be used for sorting. A post-fetch-sort operation can be eliminated.
    		Unique indexes guarantee uniquely identifiable records in the database.
	Disadvantage: 
		Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).They decrease performance on inserts, updates, and deletes.
   		They take up space (this increases with the number of fields used and the length of the fields).Some databases will monocase values in fields that are indexed.




7. What is left join? 
The SQL LEFT JOIN returns all rows from the left table, even if there are no matches in the right table. This means that if the ON clause matches 0 (zero) records in the right table; the join will still return a row in the result, but with NULL in each column from the right table.



8. In database: describe the 1NF, 2NF and 3NF. 
1NF (First Normal Form) Rules
    Rule 1-Each table cell should contain a single value.
    Rule 2-Each record needs to be unique.

2NF (Second Normal Form) Rules 
    Rule 1- Be in 1NF
    Rule 2- Single Column Primary Key

3NF (Third Normal Form) Rules
    Rule 1- Be in 2NF
    Rule 2- Has no transitive functional dependencies


9. Given a relational database, how to improve the performance of a select query involving some joins? 
	Use inner join, instead of outer join if possible.
		The outer join should only be used if it is necessary. Using outer join limits the database optimization options which typically results in slower SQL execution.
	For SQL queries with the LEFT OUTER JOIN, pushing predicates of the right table from the WHERE clause into the ON condition helps the database optimizer generate a more efficient query. Predicates of the left table can stay in the WHERE clause.
	Similarly, for the SQL queries with the RIGHT OUTER JOIN, predicates for the right table should be moved from the WHERE clause into the ON condition.

10. Composition vs aggregation. 
The three types of association connectors: association, aggregation and composition. 
    Aggregation implies a relationship where the child can exist independently of the parent. Example: Class (parent) and Student (child). Delete the Class and the Students still exist.f two classes in a model need to communicate with each other, there must be link between them, and that can be represented by an association (connector). 
    Composition implies a relationship where the child cannot exist independent of the parent. Example: House (parent) and Room (child). Rooms don't exist separate to a House. We should be more specific and use the composition link in cases where in addition to the part-of relationship between Class A and Class B - there's a strong lifecycle dependency between the two, meaning that when Class A is deleted then Class B is also deleted as a result


11. Overloading vs Overriding. 
1). The real object type in the run-time, not the reference variable's type, determines which overridden method is used at runtime. In contrast, reference type determines which overloaded method will be used at compile time.
2). Polymorphism applies to overriding, not to overloading.
3). Overriding is a run-time concept while overloading is a compile-time concept.  
4)Method overloading is used to increase the readability of the program.	Method overriding is used to provide the specific implementation of the method that is already provided by its super class.
5)Method overloading is performed within class.	Method overriding occurs in two classes that have IS-A (inheritance) relationship.
6)In case of method overloading, parameter must be different.	In case of method overriding, parameter must be same.
7)Method overloading is the example of compile time polymorphism.	Method overriding is the example of run time polymorphism.
8)In java, method overloading can't be performed by changing return type of the method only. Return type can be same or different in method overloading. But you must have to change the parameter.	Return type must be same or covariant in method overriding.


12. How to implement final keyword in java ?
You are always allowed to initialize a final variable. The compiler makes sure that you can do it only once.
Note that calling methods on an object stored in a final variable has nothing to do with the semantics of final. In other words: final is only about the reference itself, and not about the contents of the referenced object.

There are three ways to initialize a final variable :

    You can initialize a final variable when it is declared.This approach is the most common. A final variable is called blank final variable,if it is not initialized while declaration. Below are the two ways to initialize a blank final variable.
    A blank final variable can be initialized inside instance-initializer block or inside constructor. If you have more than one constructor in your class then it must be initialized in all of them, otherwise compile time error will be thrown.
    A blank final static variable can be initialized inside static block. 

When a final variable is a reference to an object, then this final variable is called reference final variable.But in case of a reference final variable, internal state of the object pointed by that reference variable can be changed. Note that this is not re-assigning. This property of final is called non-transitivity. 





13. Why String class is specific in Java?
1. Requirement of String Pool
	String pool (String intern pool) is a special storage area in Java heap. When a string is created and if the string already exists in the pool, the reference of the existing string will be returned, instead of creating a new object and returning its reference.If string is not immutable, changing the string with one reference will lead to the wrong value for the other references.

2. Allow String to Cache its Hashcode
	The hashcode of string is frequently used in Java. For example, in a HashMap. Being immutable guarantees that hashcode will always the same, so that it can be cashed without worrying the changes.That means, there is no need to calculate hashcode every time it is used. This is more efficient.

3. Security
	String is widely used as parameter for many java classes, e.g. network connection, opening files, etc. Were String not immutable, a connection or file would be changed and lead to serious security threat.




14. Compare threads behavior in single processor-multiple core and multiple processor-single core systems?
You can create multiple threads in your environment and have a single CPU core execute these threads. However, their execution will not be in parallel but merely concurrent. In other words, the CPU will execute one thread (in part or completely) first then the other thread. If there was work left on the first thread it then may return to the first thread again and execute some more instructions. The threads are thus progressing concurrently. If the threads were executed on more than one CPU core then they can be executed at the same time which means they are executed in parallel.
In summary, multiple threads on a single CPU core can be executed concurrently. Multiple threads on multiple CPU cores can be executed concurrently or in parallel.


15. Compare StringBuffer and StringReader
StringReader class is a character stream with string as a source. It takes an input string and changes it into character stream. It inherits Reader class.
StringBuffer is a peer class of String that provides much of the functionality of strings. StringBuffer may have characters and substrings inserted in the middle or appended to the end. Some of the most used methods are: length( ) and capacity( ): The length of a StringBuffer can be found by the length( ) method, while the total allocated capacity can be found by the capacity( ) method. append( ): It is used to add text at the end of the existence text. 


16.  Write a function to reverse a string.
	String class does not have reverse() method, we need to convert the input string to StringBuilder, which is achieved by using the append method of StringBuilder.
	getBytes() method is used to convert the input string into bytes[]. Then reverse the bytes elements through a loop and convert to String. 
	Convert the input string into the character array by using toCharArray() built in method. Then, add the characters of the array into the ArrayList object. Java also has built in reverse() method for the Collections class. Since Collections class reverse() method takes a list object , to reverse the list , we will pass the LinkedList object which is a type of list of characters.



17. What’s the difference between Interface and Abstract.
Abstract class	vs  Interface
1) Abstract class can have abstract and non-abstract methods.	Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.	Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.	Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.	Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class.	The interface keyword is used to declare interface.
6) An abstract classcan extend another Java class and implement multiple Java interfaces.	An interface can extend another Java interface only.
7) An abstract classcan be extended using keyword extends.	An interface classcan be implemented using keyword implements.
8) A Javaabstract classcan have class members like private, protected, etc.	Members of a Java interface are public by default.
9)Example:
public abstract class Shape{
public abstract void draw();
}	Example:
public interface Drawable{
void draw();
}





18. Write a function to reverse words in a string. 
Convert to ArrayList after splitting and then use Collections.reverse(). 


19. Can you assign a String to and Object? What about vice-versa?
We can convert String to Object in java with assignment operator. Each class is internally a child class of Object class. So you can assign string to Object directly.
We can convert Object to String in java using toString() method of Object class or String.valueOf(object) method.


20. Explain Generics.
The Java Generics programming is introduced in Java 5 to deal with type-safe objects. 
Advantage of Java Generic Class:
There are mainly 3 advantages of generics. They are as follows:
	1) Type-safety : We can hold only a single type of objects in generics. It doesn’t allow to store other objects.
	2) Type casting is not required: There is no need to typecast the object.
	3)Compile-Time Checking: It is checked at compile time so problem will not occur at runtime. The good programming strategy says it is 		far better to handle the problem at compile time than runtime.
Comparable Interface is a great example of Generics in interfaces. 
 A generic type is a class or interface that is parameterized over types. We use angle brackets (<>) to specify the type parameter. 



21. Explain Generics wildcards.
The question mark (?) is known as the wildcard in generic programming . It represents an unknown type. The wildcard can be used in a variety of situations such as the type of a parameter, field, or local variable; sometimes as a return type. Unlike arrays, different instantiations of a generic type are not compatible with each other, not even explicitly. 
	Upper Bounded Wildcards: These wildcards can be used when you want to relax the restrictions on a variable. For example, say you want 		to write a method that works on List < integer >, List < double >, and List < number > , you can do this  using an upper bounded 		wildcard.
	To declare an upper-bounded wildcard, use the wildcard character (‘?’), followed by the extends keyword, followed by its upper bound.
						public static void add(List<? extends Number> list)


	Lower Bounded Wildcards: It is expressed using the wildcard character (‘?’), followed by the super keyword, followed by its lower 		bound: <? super A>.
						Syntax: Collectiontype <? super A>
				Here arguments can be Integer or superclass of Integer(which is Number). 


22. Find the depth of a binary tree
// A binary tree node
class Node 
{
    int data;
    Node left, right;
  
    Node(int item) 
    {
        data = item;
        left = right = null;
    }
}
  
class BinaryTree 
{
     Node root;
  
    /* Compute the "maxDepth" of a tree -- the number of 
       nodes along the longest path from the root node 
       down to the farthest leaf node.*/
    int maxDepth(Node node) 
    {
        if (node == null)
            return 0;
        else
        {
            /* compute the depth of each subtree */
            int lDepth = maxDepth(node.left);
            int rDepth = maxDepth(node.right);
  
            /* use the larger one */
            if (lDepth > rDepth)
                return (lDepth + 1);
             else
                return (rDepth + 1);
        }
    }
      

23. How can you run one thread and then another only after the first thread has completed?
java.lang.Thread class provides the join() method which allows one thread to wait until another thread completes its execution. If t is a Thread object whose thread is currently executing, then t.join(); it causes the current thread to pause its execution until thread it join completes its execution.



24. What’s the difference between a thread sleep() and wait()? 
	sleep() is a method which is used to hold the process for few seconds or the time you wanted but in case of wait() method thread goes in waiting state and it won’t come back automatically until we call the notify() or notifyAll().

	The major difference is that wait() releases the lock or monitor while sleep() doesn’t releases any lock or monitor while waiting. Wait is used for inter-thread communication while sleep is used to introduce pause on execution, generally.

	Thread.sleep() sends the current thread into the “Not Runnable” state for some amount of time. The thread keeps the monitors it has acquired — i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method. If another thread calls t.interrupt() it will wake up the sleeping thread. Note that sleep is a static method, which means that it always affects the current thread (the one that is executing the sleep method). A common mistake is to call t.sleep() where t is a different thread; even then, it is the current thread that will sleep, not the t thread.

	object.wait() sends the current thread into the “Not Runnable” state, like sleep(), but with a twist. Wait is called on an object, not a thread; we call this object the “lock object.” Before lock.wait() is called, the current thread must synchronize on the lock object; wait() then releases this lock, and adds the thread to the “wait list” associated with the lock. Later, another thread can synchronize on the same lock object and call lock.notify(). This wakes up the original, waiting thread. Basically, wait()/notify() is like sleep()/interrupt(), only the active thread does not need a direct pointer to the sleeping thread, but only to the shared lock object.


25. What about suspend(), resume()?
	public void suspend()
	This method puts a thread in the suspended state and can be resumed using resume() method.

	public void resume()
	This method resumes a thread, which was suspended using suspend() method.


26. Write a function that traverses an array and checks the sum to the left of the index with the sum to the write of the index, and returns the index position when the left summation equals the right. Can you optimize your solution further?

Method 1 (Simple)
Consider every element starting from second element. Compute sum of elements on its left and sum of elements on its right. If these two sums are same, return the element.

Method 2 (Using Prefix and Suffx Arrays :

We form a prefix and suffix sum arrays
Given array : 1 4 2 5
Prefix Sum :  1  5 7 12
Suffix Sum :  12 11 7 5

Now, we will traverse both prefix arrays.
The index at which they yield equal result,
is the index where the array is partitioned 
with equal sum.

Method 3 (Space efficient)
We calculate the sum of the whole array except the first element in right_sum, considering it to be the partitioning element. Now, we traverse the array from left to right, subtracting an element from right_sum and adding an element to left_sum. The point where right_sum equals left_sum, we get the partition.
 
https://www.geeksforgeeks.org/find-element-array-sum-left-array-equal-sum-right-array/  (for code)




27. An excel sheet has different rows and columns. For example, for column A, row number is 0. For column Z, row number is 25. After column Z, it again starts like AA, AB, AC...Write program to get the column name based on a number. The method should take any number and return the column name corresponding to that column. 


private static void printString(int columnNumber)
    {
        // To store result (Excel column name)
        StringBuilder columnName = new StringBuilder();
 
        while (columnNumber > 0)
        {
            // Find remainder
            int rem = columnNumber % 26;
 
            // If remainder is 0, then a 
            // 'Z' must be there in output
            if (rem == 0)
            {
                columnName.append("Z");
                columnNumber = (columnNumber / 26) - 1;
            }
            else // If remainder is non-zero
            {
                columnName.append((char)((rem - 1) + 'A'));
                columnNumber = columnNumber / 26;
            }
        }
 
        // Reverse the string and print result
        System.out.println(columnName.reverse());
    }



28. You have an array of int with different numbers. You have to sort it in a way that the all the even numbers should come in the starting and odd numbers in the end. You cannot use a temp array or extra array in your solution. 

 static void segregateEvenOdd(int arr[])
    {
        /* Initialize left and right indexes */
        int left = 0, right = arr.length - 1;
        while (left < right)
        {
            /* Increment left index while we see 0 at left */
            while (arr[left]%2 == 0 && left < right)
                left++;
 
            /* Decrement right index while we see 1 at right */
            while (arr[right]%2 == 1 && left < right)
                right--;
 
            if (left < right)
            {
                /* Swap arr[left] and arr[right]*/
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;
                left++;
                right--;
            }
        }
    }
